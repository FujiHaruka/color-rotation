{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["css2rgb","css","Color","rgb","array","map","c","rgbValue","Math","ceil","rgbString","r","g","b","DEFAULT_COLOR","theme","createMuiTheme","palette","primary","main","grey","useStyles","makeStyles","header","marginBottom","spacing","form","margin","paper","marginTop","padding","colorTitle","textAlign","colors","display","flexWrap","ball","width","height","fontSize","ballTooltip","ballRoot","ballCaption","maxWidth","footer","ColorInput","onChangeColor","useState","value","setValue","error","setError","Tooltip","title","IconButton","onClick","random","TextField","label","onChange","event","next","target","e","CountInput","count","onChangeCount","String","type","num","Number","isInteger","ColorBall","color","actual","classes","className","Badge","badgeContent","Avatar","style","backgroundColor","Typography","variant","Footer","App","setColor","setCount","ThemeProvider","Container","Paper","noValidate","autoComplete","Array","from","length","_","i","base","degree","convert","l","h","max","min","rotateLCHColor","key","hsl","hue","rotateHSLColor","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","CssBaseline","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"gaAsBMA,EAAU,SAACC,GAAD,OACdC,IAAMD,GACHE,MACAC,QACAC,KAAI,SAACC,GAAD,OAAQA,EAAI,IAAO,QACtBC,EAAW,SAACD,GAAD,OAAeE,KAAKC,KAAMH,EAAI,IAAO,MAChDI,EAAY,SAAC,GAAD,uBAAEC,EAAF,KAAKC,EAAL,KAAQC,EAAR,yBACTN,EAASI,GADA,YACMJ,EAASK,GADf,YACqBL,EAASM,GAD9B,MAIZC,EAAgBd,EADO,mBAuBvBe,EAAQC,YAAe,CAC3BC,QAAS,CACPC,QAAS,CACPC,KAAMC,IAAK,SAKXC,EAAYC,aAAW,SAACP,GAAD,MAAY,CACvCQ,OAAQ,CACNC,aAAcT,EAAMU,QAAQ,IAE9BC,KAAM,CACJF,aAAcT,EAAMU,QAAQ,GAC5B,QAAS,CACPE,OAAQZ,EAAMU,QAAQ,KAG1BG,MAAO,CACLC,UAAWd,EAAMU,QAAQ,GACzBK,QAASf,EAAMU,QAAQ,IAEzBM,WAAY,CACVC,UAAW,SACXH,UAAWd,EAAMU,QAAQ,IAE3BQ,OAAQ,CACNC,QAAS,OACTC,SAAU,OACV,QAAS,CACPR,OAAQZ,EAAMU,QAAQ,KAG1BW,KAAM,CACJC,MAAOtB,EAAMU,QAAQ,IACrBa,OAAQvB,EAAMU,QAAQ,IACtBc,SAAU,SAEZC,YAAa,GACbC,SAAU,CACRT,UAAW,UAEbU,YAAa,CACXR,QAAS,QACTS,SAAU,OAEZC,OAAQ,CACNf,UAAWd,EAAMU,QAAQ,SAIvBoB,EAED,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACAC,mBA7EC,mBA4ED,mBACnBC,EADmB,KACZC,EADY,OAEAF,oBAAS,GAFT,mBAEnBG,EAFmB,KAEZC,EAFY,KAyB1B,OACE,oCACE,kBAACC,EAAA,EAAD,CAASC,MAAM,gBACb,kBAACC,EAAA,EAAD,CAAYC,QAVK,WACrB,IAAMpD,EAAM,CAAC,EAAG,EAAG,GAAGE,KAAI,kBACxBG,KAAKC,KAAqB,IAAhBD,KAAKgD,aAEjBP,EAASvC,EAAUP,IACnB2C,EAAc3C,KAMR,kBAAC,IAAD,QAGJ,kBAACsD,EAAA,EAAD,CACEC,MAAM,iBACNR,MAAOA,EACPF,MAAOA,EACPW,SAjCW,SAACC,GAChB,IAAMC,EAAOD,EAAME,OAAOd,MAC1BC,EAASY,GACT,IACE,IAAM1D,EAAMH,EAAQ6D,GACpBf,EAAc3C,GACV+C,GACFC,GAAS,GAEX,MAAOY,GACFb,GACHC,GAAS,SA4BXa,EAGD,SAAC,GAA6B,EAA3BC,MAA4B,IAArBC,EAAoB,EAApBA,cAAoB,EACPnB,mBAASoB,OAxHf,IAuHa,mBAC1BnB,EAD0B,KACnBC,EADmB,OAEPF,oBAAS,GAFF,mBAE1BG,EAF0B,KAEnBC,EAFmB,KAkBjC,OACE,kBAACM,EAAA,EAAD,CACEP,MAAOA,EACPQ,MAAM,QACNU,KAAK,SACLpB,MAAOA,EACPW,SArBa,SAACC,GAChB,IAAMC,EAAOD,EAAME,OAAOd,MAC1BC,EAASY,GACT,IAAMQ,EAAMC,OAAOT,GACfS,OAAOC,UAAUF,IAAQA,EAAM,GAAKA,EAAM,KAC5CH,EAAcI,OAAOT,IACjBX,GACFC,GAAS,IAGND,GACHC,GAAS,OAeXqB,EAAoD,SAAC,GAGpD,IAFLC,EAEI,EAFJA,MACAC,EACI,EADJA,OAEMC,EAAUtD,IAChB,OACE,yBAAKuD,UAAWD,EAAQlC,UACtB,kBAACoC,EAAA,EAAD,CACEC,aACEJ,GACAA,IAAWD,GACT,kBAACrB,EAAA,EAAD,CAASC,MAAK,0BAAqBqB,IACjC,kBAAC,IAAD,CAAanC,SAAS,QAAQkC,MAAM,cAK1C,kBAACM,EAAA,EAAD,CAAQH,UAAWD,EAAQvC,KAAM4C,MAAO,CAAEC,gBAAiBR,IAA3D,MAIF,kBAACS,EAAA,EAAD,CACEC,QAAQ,UACRP,UAAWD,EAAQjC,YACnBsC,MAAO,CAAEP,UAERA,KAMHW,EAAS,WACb,IAAMT,EAAUtD,IAChB,OAAO,yBAAKuD,UAAWD,EAAQ/B,UAyClByC,EAtCC,WAAO,IAAD,EACMtC,mBAASjC,GADf,mBACb2D,EADa,KACNa,EADM,OAEMvC,mBA3LN,GAyLA,mBAEbkB,EAFa,KAENsB,EAFM,KAGdZ,EAAUtD,IAChB,OACE,kBAACmE,EAAA,EAAD,CAAezE,MAAOA,GACpB,kBAAC0E,EAAA,EAAD,CAAW9C,SAAS,MAClB,kBAAC+C,EAAA,EAAD,CAAOP,QAAQ,WAAWP,UAAWD,EAAQ/C,OAC3C,4BAAQgD,UAAWD,EAAQpD,QACzB,yDAEF,0BAAMqD,UAAWD,EAAQjD,KAAMiE,YAAU,EAACC,aAAa,OACrD,kBAAC,EAAD,CAAY9C,cAAewC,IAC3B,kBAAC,EAAD,CAAYrB,MAAOA,EAAOC,cAAeqB,MAG7C,wBAAIX,UAAWD,EAAQ5C,YAAvB,mCACA,yBAAK6C,UAAWD,EAAQ1C,QACrB4D,MAAMC,KAAK,CAAEC,OAAQ9B,IAAS5D,KAAI,SAAC2F,EAAGC,GACrC,IAD2C,EAzMhC,SAACC,EAAkBC,GAAoB,IAAD,EACzCC,UAAA,MAAAA,EAAO,YAAYF,IADsB,mBACpDG,EADoD,KACjD/F,EADiD,KAC9CgG,EAD8C,KAErD5B,EAAS0B,UAAgBC,EAAG/F,EAAGgG,EAAIH,GAFkB,EAGzCzB,EAAOrE,KAAI,SAACC,GAAD,OAAOE,KAAK+F,IAAI,EAAG/F,KAAKgG,IAAI,IAAKlG,OAHH,mBAGpDK,EAHoD,KAGjDC,EAHiD,KAG9CC,EAH8C,KAI3D,MAAO,CACLV,IAAKO,EAAU,CAACC,EAAGC,EAAGC,IACtB6D,OAAQhE,EAAUgE,IAqMc+B,CAAehC,EADvB,IAAMR,EAASgC,GACvB9F,EAFmC,EAEnCA,IAAKuE,EAF8B,EAE9BA,OACb,OAAO,kBAAC,EAAD,CAAWD,MAAOtE,EAAKuE,OAAQA,EAAQgC,IAAKT,QAGvD,wBAAIrB,UAAWD,EAAQ5C,YAAvB,mCACA,yBAAK6C,UAAWD,EAAQ1C,QACrB4D,MAAMC,KAAK,CAAEC,OAAQ9B,IAAS5D,KAAI,SAAC2F,EAAGC,GACrC,IACQ9F,EAzMG,SAAC+F,EAAkBC,GACxC,IAAMQ,EAAMP,UAAA,MAAAA,EAAO,YAAYF,IACzBU,GAAOD,EAAI,GAAKR,GAAU,IAC1BhG,EAAMiG,UAAgBQ,EAAKD,EAAI,GAAIA,EAAI,IAC7C,MAAO,CACLxG,IAAKO,EAAUP,IAoMS0G,CAAepC,EADf,IAAMR,EAASgC,GACvB9F,IACR,OAAO,kBAAC,EAAD,CAAWsE,MAAOtE,EAAKuG,IAAKT,SAIzC,kBAAC,EAAD,Q,SC/Oca,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD4HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAACC,GACLA,EAAaC,gBAEdC,OAAM,SAAC7E,GACN8E,QAAQ9E,MAAMA,EAAM+E,c","file":"static/js/main.4b685ae2.chunk.js","sourcesContent":["import React, { useState, FC } from \"react\";\nimport Container from \"@material-ui/core/Container\";\nimport {\n  makeStyles,\n  createMuiTheme,\n  ThemeProvider,\n} from \"@material-ui/core/styles\";\nimport Paper from \"@material-ui/core/Paper\";\nimport { grey } from \"@material-ui/core/colors\";\nimport Avatar from \"@material-ui/core/Avatar\";\nimport TextField from \"@material-ui/core/TextField\";\nimport Typography from \"@material-ui/core/Typography\";\nimport Badge from \"@material-ui/core/Badge\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\nimport WarningIcon from \"@material-ui/icons/Warning\";\nimport * as convert from \"@csstools/convert-colors\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport AutorenewIcon from \"@material-ui/icons/Autorenew\";\nimport Color from \"color\";\n\ntype ColorArray = [number, number, number];\n\nconst css2rgb = (css: string) =>\n  Color(css)\n    .rgb()\n    .array()\n    .map((c) => (c / 255) * 100) as ColorArray;\nconst rgbValue = (c: number) => Math.ceil((c / 100) * 255);\nconst rgbString = ([r, g, b]: number[]) =>\n  `rgb(${rgbValue(r)},${rgbValue(g)},${rgbValue(b)})`;\n\nconst DEFAULT_COLOR_STRING = \"rgb(241,133,96)\";\nconst DEFAULT_COLOR = css2rgb(DEFAULT_COLOR_STRING);\nconst DEFAULT_COUNT = 7;\n\nconst rotateLCHColor = (base: ColorArray, degree: number) => {\n  const [l, c, h] = convert.rgb2lch(...base);\n  const actual = convert.lch2rgb(l, c, h + degree);\n  const [r, g, b] = actual.map((c) => Math.max(0, Math.min(100, c)));\n  return {\n    rgb: rgbString([r, g, b]),\n    actual: rgbString(actual),\n  };\n};\n\nconst rotateHSLColor = (base: ColorArray, degree: number) => {\n  const hsl = convert.rgb2hsl(...base);\n  const hue = (hsl[0] + degree) % 360;\n  const rgb = convert.hsl2rgb(hue, hsl[1], hsl[2]);\n  return {\n    rgb: rgbString(rgb),\n  };\n};\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: grey[600],\n    },\n  },\n});\n\nconst useStyles = makeStyles((theme) => ({\n  header: {\n    marginBottom: theme.spacing(4),\n  },\n  form: {\n    marginBottom: theme.spacing(4),\n    \"& > *\": {\n      margin: theme.spacing(1),\n    },\n  },\n  paper: {\n    marginTop: theme.spacing(2),\n    padding: theme.spacing(2),\n  },\n  colorTitle: {\n    textAlign: \"center\",\n    marginTop: theme.spacing(4),\n  },\n  colors: {\n    display: \"flex\",\n    flexWrap: \"wrap\",\n    \"& > *\": {\n      margin: theme.spacing(2),\n    },\n  },\n  ball: {\n    width: theme.spacing(11),\n    height: theme.spacing(11),\n    fontSize: \"2.5em\",\n  },\n  ballTooltip: {},\n  ballRoot: {\n    textAlign: \"center\",\n  },\n  ballCaption: {\n    display: \"block\",\n    maxWidth: \"6em\",\n  },\n  footer: {\n    marginTop: theme.spacing(12),\n  },\n}));\n\nconst ColorInput: FC<{\n  onChangeColor: (color: ColorArray) => void;\n}> = ({ onChangeColor }) => {\n  const [value, setValue] = useState(DEFAULT_COLOR_STRING);\n  const [error, setError] = useState(false);\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const next = event.target.value;\n    setValue(next);\n    try {\n      const rgb = css2rgb(next);\n      onChangeColor(rgb);\n      if (error) {\n        setError(false);\n      }\n    } catch (e) {\n      if (!error) {\n        setError(true);\n      }\n    }\n  };\n  const onUpdateRandom = () => {\n    const rgb = [0, 0, 0].map(() =>\n      Math.ceil(Math.random() * 100)\n    ) as ColorArray;\n    setValue(rgbString(rgb));\n    onChangeColor(rgb);\n  };\n  return (\n    <>\n      <Tooltip title=\"Random color\">\n        <IconButton onClick={onUpdateRandom}>\n          <AutorenewIcon />\n        </IconButton>\n      </Tooltip>\n      <TextField\n        label=\"Standard color\"\n        error={error}\n        value={value}\n        onChange={onChange}\n      />\n    </>\n  );\n};\n\nconst CountInput: FC<{\n  count: number;\n  onChangeCount: (count: number) => void;\n}> = ({ count, onChangeCount }) => {\n  const [value, setValue] = useState(String(DEFAULT_COUNT));\n  const [error, setError] = useState(false);\n  const onChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    const next = event.target.value;\n    setValue(next);\n    const num = Number(next);\n    if (Number.isInteger(num) && num > 0 && num < 101) {\n      onChangeCount(Number(next));\n      if (error) {\n        setError(false);\n      }\n    } else {\n      if (!error) {\n        setError(true);\n      }\n    }\n  };\n  return (\n    <TextField\n      error={error}\n      label=\"Count\"\n      type=\"number\"\n      value={value}\n      onChange={onChange}\n    />\n  );\n};\n\nconst ColorBall: FC<{ color: string; actual?: string }> = ({\n  color,\n  actual,\n}) => {\n  const classes = useStyles();\n  return (\n    <div className={classes.ballRoot}>\n      <Badge\n        badgeContent={\n          actual &&\n          actual !== color && (\n            <Tooltip title={`Actual color is ${actual}`}>\n              <WarningIcon fontSize=\"small\" color=\"primary\" />\n            </Tooltip>\n          )\n        }\n      >\n        <Avatar className={classes.ball} style={{ backgroundColor: color }}>\n          #\n        </Avatar>\n      </Badge>\n      <Typography\n        variant=\"caption\"\n        className={classes.ballCaption}\n        style={{ color }}\n      >\n        {color}\n      </Typography>\n    </div>\n  );\n};\n\nconst Footer = () => {\n  const classes = useStyles();\n  return <div className={classes.footer}></div>;\n};\n\nconst App: FC = () => {\n  const [color, setColor] = useState(DEFAULT_COLOR);\n  const [count, setCount] = useState(DEFAULT_COUNT);\n  const classes = useStyles();\n  return (\n    <ThemeProvider theme={theme}>\n      <Container maxWidth=\"md\">\n        <Paper variant=\"outlined\" className={classes.paper}>\n          <header className={classes.header}>\n            <h1>Hue rotation: LCH vs HSL</h1>\n          </header>\n          <form className={classes.form} noValidate autoComplete=\"off\">\n            <ColorInput onChangeColor={setColor} />\n            <CountInput count={count} onChangeCount={setCount} />\n          </form>\n        </Paper>\n        <h2 className={classes.colorTitle}>Hue rotation in LCH color space</h2>\n        <div className={classes.colors}>\n          {Array.from({ length: count }).map((_, i) => {\n            const degree = (360 / count) * i;\n            const { rgb, actual } = rotateLCHColor(color, degree);\n            return <ColorBall color={rgb} actual={actual} key={i} />;\n          })}\n        </div>\n        <h2 className={classes.colorTitle}>Hue rotation in HSL color space</h2>\n        <div className={classes.colors}>\n          {Array.from({ length: count }).map((_, i) => {\n            const degree = (360 / count) * i;\n            const { rgb } = rotateHSLColor(color, degree);\n            return <ColorBall color={rgb} key={i} />;\n          })}\n        </div>\n      </Container>\n      <Footer />\n    </ThemeProvider>\n  );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://bit.ly/CRA-PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://bit.ly/CRA-PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport CssBaseline from \"@material-ui/core/CssBaseline\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <CssBaseline />\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}